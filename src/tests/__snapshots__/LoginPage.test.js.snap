// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`matches previous snapshot 1`] = `
<LoginPage
  authenticateLogin={[Function]}
>
  <div
    className="main"
    data-test="loginContainer"
  >
    <WithStyles(ForwardRef(Container))
      align="center"
      component="main"
      maxWidth="xs"
      style={
        Object {
          "marginTop": 150,
        }
      }
    >
      <ForwardRef(Container)
        align="center"
        classes={
          Object {
            "disableGutters": "MuiContainer-disableGutters",
            "fixed": "MuiContainer-fixed",
            "maxWidthLg": "MuiContainer-maxWidthLg",
            "maxWidthMd": "MuiContainer-maxWidthMd",
            "maxWidthSm": "MuiContainer-maxWidthSm",
            "maxWidthXl": "MuiContainer-maxWidthXl",
            "maxWidthXs": "MuiContainer-maxWidthXs",
            "root": "MuiContainer-root",
          }
        }
        component="main"
        maxWidth="xs"
        style={
          Object {
            "marginTop": 150,
          }
        }
      >
        <main
          align="center"
          className="MuiContainer-root MuiContainer-maxWidthXs"
          style={
            Object {
              "marginTop": 150,
            }
          }
        >
          <div
            className="login-form"
          >
            <WithStyles(ForwardRef(Typography))
              style={
                Object {
                  "marginBottom": 20,
                }
              }
              variant="h3"
            >
              <ForwardRef(Typography)
                classes={
                  Object {
                    "alignCenter": "MuiTypography-alignCenter",
                    "alignJustify": "MuiTypography-alignJustify",
                    "alignLeft": "MuiTypography-alignLeft",
                    "alignRight": "MuiTypography-alignRight",
                    "body1": "MuiTypography-body1",
                    "body2": "MuiTypography-body2",
                    "button": "MuiTypography-button",
                    "caption": "MuiTypography-caption",
                    "colorError": "MuiTypography-colorError",
                    "colorInherit": "MuiTypography-colorInherit",
                    "colorPrimary": "MuiTypography-colorPrimary",
                    "colorSecondary": "MuiTypography-colorSecondary",
                    "colorTextPrimary": "MuiTypography-colorTextPrimary",
                    "colorTextSecondary": "MuiTypography-colorTextSecondary",
                    "displayBlock": "MuiTypography-displayBlock",
                    "displayInline": "MuiTypography-displayInline",
                    "gutterBottom": "MuiTypography-gutterBottom",
                    "h1": "MuiTypography-h1",
                    "h2": "MuiTypography-h2",
                    "h3": "MuiTypography-h3",
                    "h4": "MuiTypography-h4",
                    "h5": "MuiTypography-h5",
                    "h6": "MuiTypography-h6",
                    "noWrap": "MuiTypography-noWrap",
                    "overline": "MuiTypography-overline",
                    "paragraph": "MuiTypography-paragraph",
                    "root": "MuiTypography-root",
                    "srOnly": "MuiTypography-srOnly",
                    "subtitle1": "MuiTypography-subtitle1",
                    "subtitle2": "MuiTypography-subtitle2",
                  }
                }
                style={
                  Object {
                    "marginBottom": 20,
                  }
                }
                variant="h3"
              >
                <h3
                  className="MuiTypography-root MuiTypography-h3"
                  style={
                    Object {
                      "marginBottom": 20,
                    }
                  }
                >
                  Login
                </h3>
              </ForwardRef(Typography)>
            </WithStyles(ForwardRef(Typography))>
            <form
              noValidate={true}
              onSubmit={[Function]}
            >
              <WithStyles(ForwardRef(TextField))
                autoComplete="username"
                autoFocus={true}
                data-testid="usernameField"
                fullWidth={true}
                id="username"
                label="Username"
                margin="normal"
                name="username"
                onChange={[Function]}
                required={true}
                value=""
                variant="outlined"
              >
                <ForwardRef(TextField)
                  autoComplete="username"
                  autoFocus={true}
                  classes={
                    Object {
                      "root": "MuiTextField-root",
                    }
                  }
                  data-testid="usernameField"
                  fullWidth={true}
                  id="username"
                  label="Username"
                  margin="normal"
                  name="username"
                  onChange={[Function]}
                  required={true}
                  value=""
                  variant="outlined"
                >
                  <WithStyles(ForwardRef(FormControl))
                    className="MuiTextField-root"
                    color="primary"
                    data-testid="usernameField"
                    disabled={false}
                    error={false}
                    fullWidth={true}
                    margin="normal"
                    required={true}
                    variant="outlined"
                  >
                    <ForwardRef(FormControl)
                      className="MuiTextField-root"
                      classes={
                        Object {
                          "fullWidth": "MuiFormControl-fullWidth",
                          "marginDense": "MuiFormControl-marginDense",
                          "marginNormal": "MuiFormControl-marginNormal",
                          "root": "MuiFormControl-root",
                        }
                      }
                      color="primary"
                      data-testid="usernameField"
                      disabled={false}
                      error={false}
                      fullWidth={true}
                      margin="normal"
                      required={true}
                      variant="outlined"
                    >
                      <div
                        className="MuiFormControl-root MuiTextField-root MuiFormControl-marginNormal MuiFormControl-fullWidth"
                        data-testid="usernameField"
                      >
                        <WithStyles(ForwardRef(InputLabel))
                          htmlFor="username"
                          id="username-label"
                        >
                          <ForwardRef(InputLabel)
                            classes={
                              Object {
                                "animated": "MuiInputLabel-animated",
                                "asterisk": "MuiInputLabel-asterisk",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "filled": "MuiInputLabel-filled",
                                "focused": "Mui-focused",
                                "formControl": "MuiInputLabel-formControl",
                                "marginDense": "MuiInputLabel-marginDense",
                                "outlined": "MuiInputLabel-outlined",
                                "required": "Mui-required",
                                "root": "MuiInputLabel-root",
                                "shrink": "MuiInputLabel-shrink",
                              }
                            }
                            htmlFor="username"
                            id="username-label"
                          >
                            <WithStyles(ForwardRef(FormLabel))
                              className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                              classes={
                                Object {
                                  "asterisk": "MuiInputLabel-asterisk",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "focused": "Mui-focused",
                                  "required": "Mui-required",
                                }
                              }
                              data-shrink={false}
                              htmlFor="username"
                              id="username-label"
                            >
                              <ForwardRef(FormLabel)
                                className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                classes={
                                  Object {
                                    "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                    "colorSecondary": "MuiFormLabel-colorSecondary",
                                    "disabled": "Mui-disabled Mui-disabled",
                                    "error": "Mui-error Mui-error",
                                    "filled": "MuiFormLabel-filled",
                                    "focused": "Mui-focused Mui-focused",
                                    "required": "Mui-required Mui-required",
                                    "root": "MuiFormLabel-root",
                                  }
                                }
                                data-shrink={false}
                                htmlFor="username"
                                id="username-label"
                              >
                                <label
                                  className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined Mui-required Mui-required"
                                  data-shrink={false}
                                  htmlFor="username"
                                  id="username-label"
                                >
                                  Username
                                  <span
                                    aria-hidden={true}
                                    className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                                  >
                                     
                                    *
                                  </span>
                                </label>
                              </ForwardRef(FormLabel)>
                            </WithStyles(ForwardRef(FormLabel))>
                          </ForwardRef(InputLabel)>
                        </WithStyles(ForwardRef(InputLabel))>
                        <WithStyles(ForwardRef(OutlinedInput))
                          autoComplete="username"
                          autoFocus={true}
                          fullWidth={true}
                          id="username"
                          label={
                            <React.Fragment>
                              Username
                               *
                            </React.Fragment>
                          }
                          multiline={false}
                          name="username"
                          onChange={[Function]}
                          value=""
                        >
                          <ForwardRef(OutlinedInput)
                            autoComplete="username"
                            autoFocus={true}
                            classes={
                              Object {
                                "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                "adornedStart": "MuiOutlinedInput-adornedStart",
                                "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "focused": "Mui-focused",
                                "input": "MuiOutlinedInput-input",
                                "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                "marginDense": "MuiOutlinedInput-marginDense",
                                "multiline": "MuiOutlinedInput-multiline",
                                "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                "root": "MuiOutlinedInput-root",
                              }
                            }
                            fullWidth={true}
                            id="username"
                            label={
                              <React.Fragment>
                                Username
                                 *
                              </React.Fragment>
                            }
                            multiline={false}
                            name="username"
                            onChange={[Function]}
                            value=""
                          >
                            <WithStyles(ForwardRef(InputBase))
                              autoComplete="username"
                              autoFocus={true}
                              classes={
                                Object {
                                  "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                  "adornedStart": "MuiOutlinedInput-adornedStart",
                                  "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "focused": "Mui-focused",
                                  "input": "MuiOutlinedInput-input",
                                  "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                  "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                  "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                  "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                  "marginDense": "MuiOutlinedInput-marginDense",
                                  "multiline": "MuiOutlinedInput-multiline",
                                  "notchedOutline": null,
                                  "root": "MuiOutlinedInput-root",
                                }
                              }
                              fullWidth={true}
                              id="username"
                              inputComponent="input"
                              multiline={false}
                              name="username"
                              onChange={[Function]}
                              renderSuffix={[Function]}
                              type="text"
                              value=""
                            >
                              <ForwardRef(InputBase)
                                autoComplete="username"
                                autoFocus={true}
                                classes={
                                  Object {
                                    "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                    "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                    "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                    "disabled": "Mui-disabled Mui-disabled",
                                    "error": "Mui-error Mui-error",
                                    "focused": "Mui-focused Mui-focused",
                                    "formControl": "MuiInputBase-formControl",
                                    "fullWidth": "MuiInputBase-fullWidth",
                                    "input": "MuiInputBase-input MuiOutlinedInput-input",
                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                    "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                    "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                    "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                    "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                    "root": "MuiInputBase-root MuiOutlinedInput-root",
                                  }
                                }
                                fullWidth={true}
                                id="username"
                                inputComponent="input"
                                multiline={false}
                                name="username"
                                onChange={[Function]}
                                renderSuffix={[Function]}
                                type="text"
                                value=""
                              >
                                <div
                                  className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                                  onClick={[Function]}
                                >
                                  <input
                                    aria-invalid={false}
                                    autoComplete="username"
                                    autoFocus={true}
                                    className="MuiInputBase-input MuiOutlinedInput-input"
                                    disabled={false}
                                    id="username"
                                    name="username"
                                    onAnimationStart={[Function]}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    required={true}
                                    type="text"
                                    value=""
                                  />
                                  <WithStyles(ForwardRef(NotchedOutline))
                                    className="MuiOutlinedInput-notchedOutline"
                                    label={
                                      <React.Fragment>
                                        Username
                                         *
                                      </React.Fragment>
                                    }
                                    labelWidth={0}
                                    notched={false}
                                  >
                                    <ForwardRef(NotchedOutline)
                                      className="MuiOutlinedInput-notchedOutline"
                                      classes={
                                        Object {
                                          "legend": "PrivateNotchedOutline-legend-2",
                                          "legendLabelled": "PrivateNotchedOutline-legendLabelled-3",
                                          "legendNotched": "PrivateNotchedOutline-legendNotched-4",
                                          "root": "PrivateNotchedOutline-root-1",
                                        }
                                      }
                                      label={
                                        <React.Fragment>
                                          Username
                                           *
                                        </React.Fragment>
                                      }
                                      labelWidth={0}
                                      notched={false}
                                    >
                                      <fieldset
                                        aria-hidden={true}
                                        className="PrivateNotchedOutline-root-1 MuiOutlinedInput-notchedOutline"
                                      >
                                        <legend
                                          className="PrivateNotchedOutline-legendLabelled-3"
                                        >
                                          <span>
                                            Username
                                             *
                                          </span>
                                        </legend>
                                      </fieldset>
                                    </ForwardRef(NotchedOutline)>
                                  </WithStyles(ForwardRef(NotchedOutline))>
                                </div>
                              </ForwardRef(InputBase)>
                            </WithStyles(ForwardRef(InputBase))>
                          </ForwardRef(OutlinedInput)>
                        </WithStyles(ForwardRef(OutlinedInput))>
                      </div>
                    </ForwardRef(FormControl)>
                  </WithStyles(ForwardRef(FormControl))>
                </ForwardRef(TextField)>
              </WithStyles(ForwardRef(TextField))>
              <WithStyles(ForwardRef(TextField))
                autoComplete="current-password"
                data-testid="passwordField"
                fullWidth={true}
                id="password"
                label="Password"
                margin="normal"
                name="password"
                onChange={[Function]}
                required={true}
                type="password"
                value=""
                variant="outlined"
              >
                <ForwardRef(TextField)
                  autoComplete="current-password"
                  classes={
                    Object {
                      "root": "MuiTextField-root",
                    }
                  }
                  data-testid="passwordField"
                  fullWidth={true}
                  id="password"
                  label="Password"
                  margin="normal"
                  name="password"
                  onChange={[Function]}
                  required={true}
                  type="password"
                  value=""
                  variant="outlined"
                >
                  <WithStyles(ForwardRef(FormControl))
                    className="MuiTextField-root"
                    color="primary"
                    data-testid="passwordField"
                    disabled={false}
                    error={false}
                    fullWidth={true}
                    margin="normal"
                    required={true}
                    variant="outlined"
                  >
                    <ForwardRef(FormControl)
                      className="MuiTextField-root"
                      classes={
                        Object {
                          "fullWidth": "MuiFormControl-fullWidth",
                          "marginDense": "MuiFormControl-marginDense",
                          "marginNormal": "MuiFormControl-marginNormal",
                          "root": "MuiFormControl-root",
                        }
                      }
                      color="primary"
                      data-testid="passwordField"
                      disabled={false}
                      error={false}
                      fullWidth={true}
                      margin="normal"
                      required={true}
                      variant="outlined"
                    >
                      <div
                        className="MuiFormControl-root MuiTextField-root MuiFormControl-marginNormal MuiFormControl-fullWidth"
                        data-testid="passwordField"
                      >
                        <WithStyles(ForwardRef(InputLabel))
                          htmlFor="password"
                          id="password-label"
                        >
                          <ForwardRef(InputLabel)
                            classes={
                              Object {
                                "animated": "MuiInputLabel-animated",
                                "asterisk": "MuiInputLabel-asterisk",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "filled": "MuiInputLabel-filled",
                                "focused": "Mui-focused",
                                "formControl": "MuiInputLabel-formControl",
                                "marginDense": "MuiInputLabel-marginDense",
                                "outlined": "MuiInputLabel-outlined",
                                "required": "Mui-required",
                                "root": "MuiInputLabel-root",
                                "shrink": "MuiInputLabel-shrink",
                              }
                            }
                            htmlFor="password"
                            id="password-label"
                          >
                            <WithStyles(ForwardRef(FormLabel))
                              className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                              classes={
                                Object {
                                  "asterisk": "MuiInputLabel-asterisk",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "focused": "Mui-focused",
                                  "required": "Mui-required",
                                }
                              }
                              data-shrink={false}
                              htmlFor="password"
                              id="password-label"
                            >
                              <ForwardRef(FormLabel)
                                className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined"
                                classes={
                                  Object {
                                    "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                                    "colorSecondary": "MuiFormLabel-colorSecondary",
                                    "disabled": "Mui-disabled Mui-disabled",
                                    "error": "Mui-error Mui-error",
                                    "filled": "MuiFormLabel-filled",
                                    "focused": "Mui-focused Mui-focused",
                                    "required": "Mui-required Mui-required",
                                    "root": "MuiFormLabel-root",
                                  }
                                }
                                data-shrink={false}
                                htmlFor="password"
                                id="password-label"
                              >
                                <label
                                  className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated MuiInputLabel-outlined Mui-required Mui-required"
                                  data-shrink={false}
                                  htmlFor="password"
                                  id="password-label"
                                >
                                  Password
                                  <span
                                    aria-hidden={true}
                                    className="MuiFormLabel-asterisk MuiInputLabel-asterisk"
                                  >
                                     
                                    *
                                  </span>
                                </label>
                              </ForwardRef(FormLabel)>
                            </WithStyles(ForwardRef(FormLabel))>
                          </ForwardRef(InputLabel)>
                        </WithStyles(ForwardRef(InputLabel))>
                        <WithStyles(ForwardRef(OutlinedInput))
                          autoComplete="current-password"
                          autoFocus={false}
                          fullWidth={true}
                          id="password"
                          label={
                            <React.Fragment>
                              Password
                               *
                            </React.Fragment>
                          }
                          multiline={false}
                          name="password"
                          onChange={[Function]}
                          type="password"
                          value=""
                        >
                          <ForwardRef(OutlinedInput)
                            autoComplete="current-password"
                            autoFocus={false}
                            classes={
                              Object {
                                "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                "adornedStart": "MuiOutlinedInput-adornedStart",
                                "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                "disabled": "Mui-disabled",
                                "error": "Mui-error",
                                "focused": "Mui-focused",
                                "input": "MuiOutlinedInput-input",
                                "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                "marginDense": "MuiOutlinedInput-marginDense",
                                "multiline": "MuiOutlinedInput-multiline",
                                "notchedOutline": "MuiOutlinedInput-notchedOutline",
                                "root": "MuiOutlinedInput-root",
                              }
                            }
                            fullWidth={true}
                            id="password"
                            label={
                              <React.Fragment>
                                Password
                                 *
                              </React.Fragment>
                            }
                            multiline={false}
                            name="password"
                            onChange={[Function]}
                            type="password"
                            value=""
                          >
                            <WithStyles(ForwardRef(InputBase))
                              autoComplete="current-password"
                              autoFocus={false}
                              classes={
                                Object {
                                  "adornedEnd": "MuiOutlinedInput-adornedEnd",
                                  "adornedStart": "MuiOutlinedInput-adornedStart",
                                  "colorSecondary": "MuiOutlinedInput-colorSecondary",
                                  "disabled": "Mui-disabled",
                                  "error": "Mui-error",
                                  "focused": "Mui-focused",
                                  "input": "MuiOutlinedInput-input",
                                  "inputAdornedEnd": "MuiOutlinedInput-inputAdornedEnd",
                                  "inputAdornedStart": "MuiOutlinedInput-inputAdornedStart",
                                  "inputMarginDense": "MuiOutlinedInput-inputMarginDense",
                                  "inputMultiline": "MuiOutlinedInput-inputMultiline",
                                  "marginDense": "MuiOutlinedInput-marginDense",
                                  "multiline": "MuiOutlinedInput-multiline",
                                  "notchedOutline": null,
                                  "root": "MuiOutlinedInput-root",
                                }
                              }
                              fullWidth={true}
                              id="password"
                              inputComponent="input"
                              multiline={false}
                              name="password"
                              onChange={[Function]}
                              renderSuffix={[Function]}
                              type="password"
                              value=""
                            >
                              <ForwardRef(InputBase)
                                autoComplete="current-password"
                                autoFocus={false}
                                classes={
                                  Object {
                                    "adornedEnd": "MuiInputBase-adornedEnd MuiOutlinedInput-adornedEnd",
                                    "adornedStart": "MuiInputBase-adornedStart MuiOutlinedInput-adornedStart",
                                    "colorSecondary": "MuiInputBase-colorSecondary MuiOutlinedInput-colorSecondary",
                                    "disabled": "Mui-disabled Mui-disabled",
                                    "error": "Mui-error Mui-error",
                                    "focused": "Mui-focused Mui-focused",
                                    "formControl": "MuiInputBase-formControl",
                                    "fullWidth": "MuiInputBase-fullWidth",
                                    "input": "MuiInputBase-input MuiOutlinedInput-input",
                                    "inputAdornedEnd": "MuiInputBase-inputAdornedEnd MuiOutlinedInput-inputAdornedEnd",
                                    "inputAdornedStart": "MuiInputBase-inputAdornedStart MuiOutlinedInput-inputAdornedStart",
                                    "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                    "inputMarginDense": "MuiInputBase-inputMarginDense MuiOutlinedInput-inputMarginDense",
                                    "inputMultiline": "MuiInputBase-inputMultiline MuiOutlinedInput-inputMultiline",
                                    "inputTypeSearch": "MuiInputBase-inputTypeSearch",
                                    "marginDense": "MuiInputBase-marginDense MuiOutlinedInput-marginDense",
                                    "multiline": "MuiInputBase-multiline MuiOutlinedInput-multiline",
                                    "root": "MuiInputBase-root MuiOutlinedInput-root",
                                  }
                                }
                                fullWidth={true}
                                id="password"
                                inputComponent="input"
                                multiline={false}
                                name="password"
                                onChange={[Function]}
                                renderSuffix={[Function]}
                                type="password"
                                value=""
                              >
                                <div
                                  className="MuiInputBase-root MuiOutlinedInput-root MuiInputBase-fullWidth MuiInputBase-formControl"
                                  onClick={[Function]}
                                >
                                  <input
                                    aria-invalid={false}
                                    autoComplete="current-password"
                                    autoFocus={false}
                                    className="MuiInputBase-input MuiOutlinedInput-input"
                                    disabled={false}
                                    id="password"
                                    name="password"
                                    onAnimationStart={[Function]}
                                    onBlur={[Function]}
                                    onChange={[Function]}
                                    onFocus={[Function]}
                                    required={true}
                                    type="password"
                                    value=""
                                  />
                                  <WithStyles(ForwardRef(NotchedOutline))
                                    className="MuiOutlinedInput-notchedOutline"
                                    label={
                                      <React.Fragment>
                                        Password
                                         *
                                      </React.Fragment>
                                    }
                                    labelWidth={0}
                                    notched={false}
                                  >
                                    <ForwardRef(NotchedOutline)
                                      className="MuiOutlinedInput-notchedOutline"
                                      classes={
                                        Object {
                                          "legend": "PrivateNotchedOutline-legend-2",
                                          "legendLabelled": "PrivateNotchedOutline-legendLabelled-3",
                                          "legendNotched": "PrivateNotchedOutline-legendNotched-4",
                                          "root": "PrivateNotchedOutline-root-1",
                                        }
                                      }
                                      label={
                                        <React.Fragment>
                                          Password
                                           *
                                        </React.Fragment>
                                      }
                                      labelWidth={0}
                                      notched={false}
                                    >
                                      <fieldset
                                        aria-hidden={true}
                                        className="PrivateNotchedOutline-root-1 MuiOutlinedInput-notchedOutline"
                                      >
                                        <legend
                                          className="PrivateNotchedOutline-legendLabelled-3"
                                        >
                                          <span>
                                            Password
                                             *
                                          </span>
                                        </legend>
                                      </fieldset>
                                    </ForwardRef(NotchedOutline)>
                                  </WithStyles(ForwardRef(NotchedOutline))>
                                </div>
                              </ForwardRef(InputBase)>
                            </WithStyles(ForwardRef(InputBase))>
                          </ForwardRef(OutlinedInput)>
                        </WithStyles(ForwardRef(OutlinedInput))>
                      </div>
                    </ForwardRef(FormControl)>
                  </WithStyles(ForwardRef(FormControl))>
                </ForwardRef(TextField)>
              </WithStyles(ForwardRef(TextField))>
              <div
                className="form-group"
              >
                <WithStyles(ForwardRef(Button))
                  color="secondary"
                  data-testid="loginButton"
                  fullWidth={true}
                  style={
                    Object {
                      "fontSize": 16,
                      "height": 40,
                      "marginTop": 20,
                    }
                  }
                  type="submit"
                  variant="contained"
                >
                  <ForwardRef(Button)
                    classes={
                      Object {
                        "colorInherit": "MuiButton-colorInherit",
                        "contained": "MuiButton-contained",
                        "containedPrimary": "MuiButton-containedPrimary",
                        "containedSecondary": "MuiButton-containedSecondary",
                        "containedSizeLarge": "MuiButton-containedSizeLarge",
                        "containedSizeSmall": "MuiButton-containedSizeSmall",
                        "disableElevation": "MuiButton-disableElevation",
                        "disabled": "Mui-disabled",
                        "endIcon": "MuiButton-endIcon",
                        "focusVisible": "Mui-focusVisible",
                        "fullWidth": "MuiButton-fullWidth",
                        "iconSizeLarge": "MuiButton-iconSizeLarge",
                        "iconSizeMedium": "MuiButton-iconSizeMedium",
                        "iconSizeSmall": "MuiButton-iconSizeSmall",
                        "label": "MuiButton-label",
                        "outlined": "MuiButton-outlined",
                        "outlinedPrimary": "MuiButton-outlinedPrimary",
                        "outlinedSecondary": "MuiButton-outlinedSecondary",
                        "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                        "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                        "root": "MuiButton-root",
                        "sizeLarge": "MuiButton-sizeLarge",
                        "sizeSmall": "MuiButton-sizeSmall",
                        "startIcon": "MuiButton-startIcon",
                        "text": "MuiButton-text",
                        "textPrimary": "MuiButton-textPrimary",
                        "textSecondary": "MuiButton-textSecondary",
                        "textSizeLarge": "MuiButton-textSizeLarge",
                        "textSizeSmall": "MuiButton-textSizeSmall",
                      }
                    }
                    color="secondary"
                    data-testid="loginButton"
                    fullWidth={true}
                    style={
                      Object {
                        "fontSize": 16,
                        "height": 40,
                        "marginTop": 20,
                      }
                    }
                    type="submit"
                    variant="contained"
                  >
                    <WithStyles(ForwardRef(ButtonBase))
                      className="MuiButton-root MuiButton-contained MuiButton-containedSecondary MuiButton-fullWidth"
                      component="button"
                      data-testid="loginButton"
                      disabled={false}
                      focusRipple={true}
                      focusVisibleClassName="Mui-focusVisible"
                      style={
                        Object {
                          "fontSize": 16,
                          "height": 40,
                          "marginTop": 20,
                        }
                      }
                      type="submit"
                    >
                      <ForwardRef(ButtonBase)
                        className="MuiButton-root MuiButton-contained MuiButton-containedSecondary MuiButton-fullWidth"
                        classes={
                          Object {
                            "disabled": "Mui-disabled",
                            "focusVisible": "Mui-focusVisible",
                            "root": "MuiButtonBase-root",
                          }
                        }
                        component="button"
                        data-testid="loginButton"
                        disabled={false}
                        focusRipple={true}
                        focusVisibleClassName="Mui-focusVisible"
                        style={
                          Object {
                            "fontSize": 16,
                            "height": 40,
                            "marginTop": 20,
                          }
                        }
                        type="submit"
                      >
                        <button
                          className="MuiButtonBase-root MuiButton-root MuiButton-contained MuiButton-containedSecondary MuiButton-fullWidth"
                          data-testid="loginButton"
                          disabled={false}
                          onBlur={[Function]}
                          onDragLeave={[Function]}
                          onFocus={[Function]}
                          onKeyDown={[Function]}
                          onKeyUp={[Function]}
                          onMouseDown={[Function]}
                          onMouseLeave={[Function]}
                          onMouseUp={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                          style={
                            Object {
                              "fontSize": 16,
                              "height": 40,
                              "marginTop": 20,
                            }
                          }
                          tabIndex={0}
                          type="submit"
                        >
                          <span
                            className="MuiButton-label"
                          >
                            Login
                          </span>
                          <WithStyles(memo)
                            center={false}
                          >
                            <ForwardRef(TouchRipple)
                              center={false}
                              classes={
                                Object {
                                  "child": "MuiTouchRipple-child",
                                  "childLeaving": "MuiTouchRipple-childLeaving",
                                  "childPulsate": "MuiTouchRipple-childPulsate",
                                  "ripple": "MuiTouchRipple-ripple",
                                  "ripplePulsate": "MuiTouchRipple-ripplePulsate",
                                  "rippleVisible": "MuiTouchRipple-rippleVisible",
                                  "root": "MuiTouchRipple-root",
                                }
                              }
                            >
                              <span
                                className="MuiTouchRipple-root"
                              >
                                <TransitionGroup
                                  childFactory={[Function]}
                                  component={null}
                                  exit={true}
                                />
                              </span>
                            </ForwardRef(TouchRipple)>
                          </WithStyles(memo)>
                        </button>
                      </ForwardRef(ButtonBase)>
                    </WithStyles(ForwardRef(ButtonBase))>
                  </ForwardRef(Button)>
                </WithStyles(ForwardRef(Button))>
              </div>
            </form>
          </div>
        </main>
      </ForwardRef(Container)>
    </WithStyles(ForwardRef(Container))>
  </div>
</LoginPage>
`;
